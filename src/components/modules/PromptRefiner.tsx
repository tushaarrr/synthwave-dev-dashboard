
import { useState } from "react";
import { useAuth } from "@/components/auth/AuthProvider";
import { Navigate } from "react-router-dom";
import LoadingState from "../LoadingState";
import OutputCard from "../OutputCard";
import { usePromptRefiner } from "@/hooks/usePromptRefiner";
import { toast } from "@/hooks/use-toast";
import { Copy, Download, Sparkles } from "lucide-react";

const PromptRefiner = () => {
  const { user, loading: authLoading } = useAuth();
  const { analyzePrompt, isLoading, result } = usePromptRefiner();
  const [prompt, setPrompt] = useState("");
  const [activeVariation, setActiveVariation] = useState<'concise' | 'creative' | 'optimized'>('concise');

  if (authLoading) {
    return <LoadingState module="promptrefiner" />;
  }

  if (!user) {
    return <Navigate to="/login" replace />;
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!prompt.trim()) return;

    try {
      await analyzePrompt(prompt);
      toast({
        title: "Analysis Complete!",
        description: "Your prompt has been refined and analyzed",
      });
    } catch (error) {
      toast({
        title: "Error",
        description: "Failed to analyze prompt. Please try again.",
        variant: "destructive",
      });
    }
  };

  const copyToClipboard = async (text: string) => {
    try {
      await navigator.clipboard.writeText(text);
      toast({
        title: "Copied!",
        description: "Text copied to clipboard",
      });
    } catch (error) {
      toast({
        title: "Error",
        description: "Failed to copy text",
        variant: "destructive",
      });
    }
  };

  const exportToMarkdown = () => {
    if (!result) return;
    
    const markdown = `# Refined Prompt Analysis

## Original Prompt
${prompt}

## Analysis
- **Score:** ${result.score}/10
- **Grade:** ${result.grade}
- **Tags:** ${result.tags.join(', ')}

## Refined Version
${result.refinedPrompt}

## Variations

### Concise & Formal
${result.variations.concise}

### Creative & Conversational
${result.variations.creative}

### Optimized for Claude
${result.variations.optimized}

---
*Generated by DevSynth AI PromptRefiner*
`;

    const blob = new Blob([markdown], { type: 'text/markdown' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'refined-prompt.md';
    a.click();
    URL.revokeObjectURL(url);

    toast({
      title: "Exported!",
      description: "Markdown file downloaded successfully",
    });
  };

  const getTagColor = (tag: string) => {
    switch (tag) {
      case 'Well-structured': return 'bg-green-500';
      case 'Too brief': return 'bg-red-500';
      case 'Missing context': return 'bg-orange-500';
      case 'Too generic': return 'bg-yellow-500';
      case 'Unclear output': return 'bg-red-400';
      case 'Verbose': return 'bg-blue-500';
      default: return 'bg-gray-500';
    }
  };

  const getGradeColor = (grade: string) => {
    switch (grade) {
      case 'Excellent': return 'bg-green-500';
      case 'Good': return 'bg-blue-500';
      case 'Fair': return 'bg-yellow-500';
      case 'Needs Improvement': return 'bg-red-500';
      default: return 'bg-gray-500';
    }
  };

  if (isLoading) return <LoadingState module="promptrefiner" />;

  return (
    <div className="space-y-6">
      <div className="glass-dark rounded-2xl p-6 animate-scale-in">
        <h2 className="text-2xl font-bold font-sora mb-2 bg-gradient-to-r from-neon-purple to-neon-pink bg-clip-text text-transparent">
          PromptRefiner
        </h2>
        <p className="text-muted-foreground mb-6">
          Paste your AI prompt related to a dev task (e.g., build an app, write SQL, train ML model)
        </p>

        <form onSubmit={handleSubmit} className="space-y-4">
          <div>
            <label className="block text-sm font-medium mb-2">Your Tech Prompt</label>
            <textarea
              value={prompt}
              onChange={(e) => setPrompt(e.target.value)}
              placeholder="Create a React app with Firebase authentication and real-time chat functionality..."
              rows={6}
              className="w-full glass rounded-xl px-4 py-3 bg-black/20 border-0 focus:ring-2 focus:ring-neon-purple transition-all resize-none font-mono text-sm"
            />
          </div>
          <button
            type="submit"
            disabled={!prompt.trim() || isLoading}
            className="w-full bg-gradient-to-r from-neon-purple to-neon-pink rounded-xl py-3 font-semibold hover:scale-105 transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center gap-2"
          >
            <Sparkles className="w-5 h-5" />
            Refine Prompt
          </button>
        </form>
      </div>

      {result && (
        <div className="grid gap-6">
          {/* Analysis Panel */}
          <OutputCard
            title="Prompt Analysis"
            tag={result.grade}
            tagColor={getGradeColor(result.grade)}
            content={
              <div className="space-y-4">
                <div className="flex items-center justify-between">
                  <span className="text-lg font-semibold">Score</span>
                  <div className="flex items-center gap-2">
                    <div className="w-32 bg-gray-700 rounded-full h-2">
                      <div 
                        className="bg-gradient-to-r from-neon-blue to-neon-purple h-2 rounded-full transition-all duration-500"
                        style={{ width: `${(result.score / 10) * 100}%` }}
                      />
                    </div>
                    <span className="text-xl font-bold text-neon-purple">{result.score}/10</span>
                  </div>
                </div>
                
                <div>
                  <span className="text-sm font-medium text-muted-foreground mb-2 block">Analysis Tags</span>
                  <div className="flex flex-wrap gap-2">
                    {result.tags.map((tag, index) => (
                      <span
                        key={index}
                        className={`px-3 py-1 rounded-full text-xs font-medium text-white ${getTagColor(tag)}`}
                      >
                        {tag}
                      </span>
                    ))}
                  </div>
                </div>
              </div>
            }
            delay={100}
          />

          {/* Refined Prompt */}
          <OutputCard
            title="Refined Prompt"
            tag="AI Enhanced"
            tagColor="bg-neon-green"
            content={
              <div className="space-y-4">
                <div className="bg-black/30 p-4 rounded-lg">
                  <pre className="text-sm leading-relaxed whitespace-pre-wrap font-mono">
                    {result.refinedPrompt}
                  </pre>
                </div>
                <div className="flex gap-2">
                  <button
                    onClick={() => copyToClipboard(result.refinedPrompt)}
                    className="flex items-center gap-2 px-4 py-2 bg-neon-blue/20 hover:bg-neon-blue/30 rounded-lg transition-colors"
                  >
                    <Copy className="w-4 h-4" />
                    Copy Prompt
                  </button>
                  <button
                    onClick={exportToMarkdown}
                    className="flex items-center gap-2 px-4 py-2 bg-neon-purple/20 hover:bg-neon-purple/30 rounded-lg transition-colors"
                  >
                    <Download className="w-4 h-4" />
                    Export to Markdown
                  </button>
                </div>
              </div>
            }
            delay={200}
          />

          {/* Style Variations */}
          <OutputCard
            title="Style Variations"
            tag="3 Options"
            tagColor="bg-neon-orange"
            content={
              <div className="space-y-4">
                <div className="flex gap-2">
                  {(['concise', 'creative', 'optimized'] as const).map((variation) => (
                    <button
                      key={variation}
                      onClick={() => setActiveVariation(variation)}
                      className={`px-4 py-2 rounded-lg font-medium transition-colors ${
                        activeVariation === variation
                          ? 'bg-neon-purple text-white'
                          : 'bg-gray-700 text-gray-300 hover:bg-gray-600'
                      }`}
                    >
                      {variation === 'concise' ? 'Concise & Formal' : 
                       variation === 'creative' ? 'Creative & Conversational' : 
                       'Optimized for Claude'}
                    </button>
                  ))}
                </div>
                
                <div className="bg-black/30 p-4 rounded-lg">
                  <pre className="text-sm leading-relaxed whitespace-pre-wrap font-mono">
                    {result.variations[activeVariation]}
                  </pre>
                </div>
                
                <button
                  onClick={() => copyToClipboard(result.variations[activeVariation])}
                  className="flex items-center gap-2 px-4 py-2 bg-neon-blue/20 hover:bg-neon-blue/30 rounded-lg transition-colors"
                >
                  <Copy className="w-4 h-4" />
                  Copy {activeVariation.charAt(0).toUpperCase() + activeVariation.slice(1)} Version
                </button>
              </div>
            }
            delay={300}
          />
        </div>
      )}
    </div>
  );
};

export default PromptRefiner;
